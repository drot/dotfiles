* General options

** Disable unnecessary GUI elements
#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
#+end_src

** Show tooltips in the echo area
#+begin_src emacs-lisp
  (tooltip-mode 0)
#+end_src

** Disable cursor blinking
#+begin_src emacs-lisp
  (blink-cursor-mode 0)
#+end_src

** Show column number and buffer size on the modeline
#+begin_src emacs-lisp
  (column-number-mode 1)
  (size-indication-mode 1)
#+end_src

** Indicate buffer boundaries and empty lines
#+begin_src emacs-lisp
  (setq-default indicate-buffer-boundaries 'left
                indicate-empty-lines t)
#+end_src

** Don't show the welcome messages
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t
        initial-scratch-message nil)
#+end_src

** Answer y or n instead of yes or no at prompts
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Show unfinished keystrokes early
#+begin_src emacs-lisp
  (setq echo-keystrokes 0.1)
#+end_src

** Enable recursive minibuffers and indicate depth
#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)
#+end_src

** Delete duplicates from minibuffer history
#+begin_src emacs-lisp
  (setq history-delete-duplicates t)
#+end_src

** Ignore case on completion
#+begin_src emacs-lisp
  (setq read-file-name-completion-ignore-case t
        read-buffer-completion-ignore-case t)
#+end_src

** Show minibuffer completion only on second failed attempt
#+begin_src emacs-lisp
  (setq completion-auto-help 'lazy)
#+end_src

** Enable all disabled commands
#+begin_src emacs-lisp
  (setq disabled-command-function nil)
#+end_src

** Use spaces instead of tabs and set default tab width
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 4)
#+end_src

** Increase default fill width
#+begin_src emacs-lisp
  (setq-default fill-column 80)
#+end_src

** Mouse yank at point instead of click
#+begin_src emacs-lisp
  (setq mouse-yank-at-point t)
#+end_src

** Set fallback font
#+begin_src emacs-lisp
  (set-fontset-font "fontset-default" nil
                    (font-spec :size 16 :name "Symbola"))
#+end_src

** Display read-only buffers in view mode
#+begin_src emacs-lisp
  (setq view-read-only t
        view-inhibit-help-message t)
#+end_src

** Configuration for backup files
#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms `((".*" ,drot/cache-directory t))
        auto-save-list-file-prefix (expand-file-name ".saves-" drot/cache-directory)
        backup-directory-alist `(("." . ,drot/cache-directory))
        version-control t
        kept-new-versions 2
        delete-old-versions t
        backup-by-copying t)
#+end_src

** Save minibuffer history
#+begin_src emacs-lisp
  (setq savehist-additional-variables '(search-ring regexp-search-ring)
        savehist-autosave-interval 60
        savehist-file (expand-file-name "minbuf.hist" drot/cache-directory))
  (savehist-mode 1)
#+end_src

** Remember point position in files
#+begin_src emacs-lisp
  (setq save-place-file (expand-file-name "saved-places" drot/cache-directory))
  (setq-default save-place t)
#+end_src

** IDO
#+begin_src emacs-lisp
  (setq ido-save-directory-list-file (expand-file-name "ido.hist" drot/cache-directory)
        ido-create-new-buffer 'always
        ido-use-filename-at-point 'guess
        ido-max-prospects 10
        ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]"
                                " [No Match]" " [Matched]" " [Not Readable]"
                                " [Too Big]" " [Confirm]")))

  (ido-mode 1)
  (ido-everywhere 1)

  (defun ido-disable-line-truncation ()
    (set (make-local-variable 'truncate-lines) nil))
  (add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-truncation)
  (defun ido-define-keys ()
    "C-(n|p) is more intuitive in vertical layout."
    (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
    (define-key ido-completion-map (kbd "C-p") 'ido-prev-match))
  (add-hook 'ido-setup-hook 'ido-define-keys)
#+end_src

** Find file at point
#+begin_src emacs-lisp
  (setq ffap-require-prefix t)
  (ffap-bindings)
#+end_src

** Use Ibuffer for buffer list
#+begin_src emacs-lisp
  (bind-key "C-x C-b" 'ibuffer)
  (setq ibuffer-default-sorting-mode 'major-mode)
#+end_src

** Pretty lambdas
#+begin_src emacs-lisp
  (global-prettify-symbols-mode 1)
#+end_src

** Highlight regexps interactively
#+begin_src emacs-lisp
  (global-hi-lock-mode 1)
#+end_src

** Undo and redo the window configuration
#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

** Load abbrevs and enable Abbrev Mode
#+begin_src emacs-lisp
  (setq abbrev-file-name (expand-file-name "abbrevs" drot/cache-directory)
        save-abbrevs t)
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file))
  (setq-default abbrev-mode t)
#+end_src

** Replace dabbrev-expand with hippie-expand
#+begin_src emacs-lisp
  (bind-key "M-/" 'hippie-expand)
#+end_src

** Fly Spell mode configuration
#+begin_src emacs-lisp
  (setq ispell-extra-args '("--sug-mode=ultra")
        ispell-dictionary "english")
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src

** Show documentation with ElDoc mode
#+begin_src emacs-lisp
  (dolist (hook '(emacs-lisp-mode-hook
                  lisp-interaction-mode-hook
                  ielm-mode-hook))
    (add-hook hook 'eldoc-mode))
#+end_src

** Hide Show mode
#+begin_src emacs-lisp
  (dolist (hook '(c-mode-common-hook
                  emacs-lisp-mode-hook
                  python-mode-hook))
    (add-hook hook 'hs-minor-mode))
#+end_src

* Deferred modes

** Regexp builder
#+begin_src emacs-lisp
  (use-package re-builder
    :defer t
    :config
    (progn
      (setq reb-re-syntax 'string)))
#+end_src

** Bookmarks save directory
#+begin_src emacs-lisp
  (use-package bookmark
    :defer t
    :config
    (progn
      (setq bookmark-default-file (expand-file-name "bookmarks" drot/cache-directory)
            bookmark-save-flag 1)))
#+end_src

** Eshell save directory
#+begin_src emacs-lisp
  (use-package eshell
    :defer t
    :config
    (progn
      (setq eshell-directory-name (expand-file-name "eshell" drot/cache-directory))))
#+end_src

** Shell mode configuration
#+begin_src emacs-lisp
  (use-package shell
    :defer t
    :config
    (progn
      (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
      (add-hook 'shell-mode-hook 'compilation-shell-minor-mode)))
#+end_src

** Disable YASnippet in term mode
#+begin_src emacs-lisp
  (use-package term
    :defer t
    :config
    (progn
      (add-hook 'term-mode-hook (lambda ()
                                  (yas-minor-mode 0)))))
#+end_src

** Use Unified diff format
#+begin_src emacs-lisp
  (use-package diff
    :defer t
    :config
    (progn
      (setq diff-switches "-u")))
#+end_src

** Ediff window split
#+begin_src emacs-lisp
  (use-package ediff
    :defer t
    :config
    (progn
      (setq ediff-split-window-function 'split-window-horizontally
            ediff-window-setup-function 'ediff-setup-windows-plain)))
#+end_src

** Compilation configuration
#+begin_src emacs-lisp
  (use-package compile
    :defer t
    :config
    (progn
      (setq compilation-scroll-output 'first-error
            compilation-ask-about-save nil)))
#+end_src

** CC mode configuration
#+begin_src emacs-lisp
  (use-package cc-mode
    :defer t
    :config
    (progn
      (defun drot/c-mode-hook ()
        "C mode setup"
        (unless (or (file-exists-p "makefile")
                    (file-exists-p "Makefile"))
          (set (make-local-variable 'compile-command)
               (concat "gcc " (buffer-file-name) " -o "))))

      (defun drot/c++-mode-hook ()
        "C++ mode setup"
        (unless (or (file-exists-p "makefile")
                    (file-exists-p "Makefile"))
          (set (make-local-variable 'compile-command)
               (concat "g++ " (buffer-file-name) " -o "))))

      (add-hook 'c-mode-hook 'drot/c-mode-hook)
      (add-hook 'c++-mode-hook 'drot/c++-mode-hook)
      (add-hook 'c-mode-common-hook 'auto-fill-mode)

      (setq c-basic-offset 4
            c-default-style '((java-mode . "java")
                              (awk-mode . "awk")
                              (other . "stroustrup")))))
#+end_src

** TRAMP configuration
#+begin_src emacs-lisp
  (use-package tramp
    :defer t
    :config
    (progn
      (setq tramp-default-method "ssh"
            tramp-backup-directory-alist backup-directory-alist
            tramp-auto-save-directory drot/cache-directory)))
#+end_src

** Prevent GnuTLS warnings
#+begin_src emacs-lisp
  (use-package gnutls
    :defer t
    :config
    (progn
      (setq gnutls-min-prime-bits 1024)))
#+end_src

** Calendar configuration
#+begin_src emacs-lisp
  (use-package calendar
    :defer t
    :config
    (progn
      (setq calendar-mark-holidays-flag t
            holiday-general-holidays nil
            holiday-bahai-holidays nil
            holiday-oriental-holidays nil
            holiday-solar-holidays nil
            holiday-islamic-holidays nil
            holiday-hebrew-holidays nil
            calendar-date-style 'european
            calendar-latitude 43.20
            calendar-longitude 17.48
            calendar-location-name "Mostar, Bosnia and Herzegovina")))
#+end_src

** Doc View mode configuration
#+begin_src emacs-lisp
  (use-package doc-view
    :defer t
    :config
    (progn
      (setq doc-view-resolution 300
            doc-view-continuous t)))
#+end_src

** Open URLs in Conkeror
#+begin_src emacs-lisp
  (use-package browse-url
    :defer t
    :config
    (progn
      (setq browse-url-browser-function 'browse-url-generic
            browse-url-generic-program "conkeror")))
#+end_src

* Packages

** Color theme
#+begin_src emacs-lisp
  (use-package zenburn-theme
    :ensure t)
#+end_src

** Anzu
#+begin_src emacs-lisp
  (use-package anzu
    :ensure t
    :init
    (progn
      (global-anzu-mode 1))
    :bind (("M-%" . anzu-query-replace)
           ("C-M-%" . anzu-query-replace-regexp)))
#+end_src

** Browse kill ring
#+begin_src emacs-lisp
  (use-package browse-kill-ring
    :ensure t
    :defer t)
#+end_src

** Color identifiers mode
#+begin_src emacs-lisp
  (use-package color-identifiers-mode
    :ensure t
    :diminish (color-identifiers-mode . "CId")
    :init
    (progn)
    (add-hook 'after-init-hook 'global-color-identifiers-mode))
#+end_src

** Company mode
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (progn
      (add-hook 'after-init-hook 'global-company-mode))
    :diminish "co"
    :bind ("C-c y" . company-yasnippet)
    :config
    (progn
      (setq company-echo-delay 0
            company-show-numbers t
            company-backends '(company-nxml
                               company-css
                               company-capf (company-dabbrev-code company-keywords)
                               company-files
                               company-dabbrev))))
#+end_src

** Flx IDO
#+begin_src emacs-lisp
  (use-package flx-ido
    :ensure t
    :init
    (progn
      (flx-ido-mode 1)
      (setq ido-enable-flex-matching t
            ido-use-faces nil)))
#+end_src

** IDO Ubiquitous
#+begin_src emacs-lisp
  (defvar predicate nil)
  (defvar inherit-input-method nil)
  (defvar ido-cur-item nil)
  (defvar ido-default-item nil)
  (defvar ido-cur-list nil)

  (use-package ido-ubiquitous
    :ensure t
    :init
    (progn
      (ido-ubiquitous-mode 1)
      (defmacro ido-ubiquitous-use-new-completing-read (cmd package)
        `(eval-after-load ,package
           '(defadvice ,cmd (around ido-ubiquitous-new activate)
              (let ((ido-ubiquitous-enable-compatibility nil))
                ad-do-it)))))
    :config
    (progn
      (ido-ubiquitous-use-new-completing-read yas-expand 'yasnippet)
      (ido-ubiquitous-use-new-completing-read yas-visit-snippet-file 'yasnippet)))
#+end_src

** Smex
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init
    (progn
      (setq smex-save-file (expand-file-name "smex-items" drot/cache-directory))
      (smex-initialize))
    :bind (("M-x" . smex)
           ("M-X" . smex-major-mode-commands)
           ("C-c C-c M-x" . execute-extended-command)))
#+end_src

** Lua mode
#+begin_src emacs-lisp
  (use-package lua-mode
    :ensure t
    :defer t)
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :config
    (progn
      (setq magit-completing-read-function 'magit-ido-completing-read)))
#+end_src

** Org-mode
#+begin_src emacs-lisp
  (use-package org
    :bind (("C-c a" . org-agenda)
           ("C-c l" . org-store-link))
    :config
    (progn
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((C . t)
         (emacs-lisp . t)
         (sh . t)))
      (setq org-log-done 'time
            org-src-fontify-natively t
            org-src-tab-acts-natively t
            org-completion-use-ido t
            org-outline-path-complete-in-steps nil)))
#+end_src

** ERC configuration
#+begin_src emacs-lisp
  (use-package erc
    :ensure erc-hl-nicks
    :defer t
    :init
    (progn
      (defun irc ()
    "Connect to IRC."
    (interactive)
    (erc-tls :server "adams.freenode.net" :port 6697
             :nick "drot")
    (erc-tls :server "pine.forestnet.org" :port 6697
             :nick "drot")))
    :config
    (progn
      (add-to-list 'erc-modules 'notifications)
      (add-to-list 'erc-modules 'smiley)

      (setq erc-prompt-for-password nil
            erc-autojoin-channels-alist '(("freenode" "#archlinux" "#emacs")
                                          ("forestnet" "#reloaded" "#fo2"))
            erc-server-reconnect-timeout 10
            erc-lurker-hide-list '("JOIN" "PART" "QUIT" "AWAY")
            erc-truncate-buffer-on-save t
            erc-fill-function 'erc-fill-static
            erc-fill-column 125
            erc-fill-static-center 15
            erc-track-exclude-server-buffer t
            erc-track-showcount t
            erc-track-switch-direction 'importance
            erc-track-visibility 'selected-visible
            erc-insert-timestamp-function 'erc-insert-timestamp-left
            erc-timestamp-only-if-changed-flag nil
            erc-timestamp-format "[%H:%M] "
            erc-header-line-format "%t: %o"
            erc-interpret-mirc-color t
            erc-button-buttonize-nicks nil
            erc-format-nick-function 'erc-format-@nick
            erc-nick-uniquifier "_"
            erc-show-my-nick nil
            erc-prompt (lambda ()
                         (concat (buffer-name) ">")))

      (defun drot/erc-mode-hook ()
        "Keep prompt at bottom, disable Company and YASnippet."
        (set (make-local-variable 'scroll-conservatively) 100)
        (company-mode 0)
        (yas-minor-mode 0))

      (add-hook 'erc-mode-hook 'drot/erc-mode-hook)
      (add-hook 'erc-insert-post-hook 'erc-truncate-buffer)
      (erc-spelling-mode 1)))
#+end_src

** PKGBUILD mode
#+begin_src emacs-lisp
  (use-package pkgbuild-mode
    :ensure t
    :defer t)
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (progn
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
#+end_src

** Smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (progn
      (require 'smartparens-config)
      (setq sp-base-key-bindings 'paredit
            sp-autoskip-closing-pair 'always)
      
      (sp-use-paredit-bindings)
      (show-smartparens-global-mode 1)

      (add-hook 'prog-mode-hook 'smartparens-mode)

      (dolist (hook '(emacs-lisp-mode-hook
                      lisp-interaction-mode-hook
                      ielm-mode-hook))
        (add-hook hook 'smartparens-strict-mode))

      (defvar drot/sp-minibuffer-commands '(eval-expression
                                            pp-eval-expression
                                            eval-expression-with-eldoc
                                            ibuffer-do-eval
                                            ibuffer-do-view-and-eval)
        "Interactive commands for which SP should be enabled in the minibuffer.")

      (defun drot/sp-minibuffer ()
        "Enable SP during lisp-related minibuffer commands."
        (if (memq this-command drot/sp-minibuffer-commands)
            (smartparens-strict-mode 1)))

      (add-hook 'minibuffer-setup-hook 'drot/sp-minibuffer)))
#+end_src

** YASnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (progn
      (make-directory "~/.emacs.d/snippets" t))
    :config
    (progn
      (setq yas-verbosity 1)
      (yas-global-mode 1)))
#+end_src

** Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish "UT"
    :config
    (progn
      (setq undo-tree-history-directory-alist backup-directory-alist
            undo-tree-auto-save-history t)
      (global-undo-tree-mode 1)))
#+end_src

* Customize

** Load changes from the customize interface
#+begin_src emacs-lisp
  (setq custom-file drot/custom-file)
  (when (file-exists-p drot/custom-file)
    (load drot/custom-file))
#+end_src
