;;; config --- StumpWM user configuration -*- mode: lisp; -*-

;; Author: drot
;; Created 30-01-2011

;;; Commentary:

;; Tomorrow Night themed, mostly default key bindings.

;;; Code:

(in-package :stumpwm)

;;; Make sure `slynk' is installed
(ql:quickload "slynk")

;;; Debug instead of abort
(setf *top-level-error-action* :break)

;;; Set default font
(set-font "-xos4-terminus-medium-r-normal-*-22-*-*-*-*-*-*-*")

;;; Change default color map
(setf *colors* '("#1d1f21"              ; 0 black
                 "#cc6666"              ; 1 red
                 "#b5bd68"              ; 2 green
                 "#f0c674"              ; 3 yellow
                 "#81a2be"              ; 4 blue
                 "#b294bb"              ; 5 magenta
                 "#8abeb7"              ; 6 cyan
                 "#c5c8c6"))            ; 7 white
(update-color-map (current-screen))

;;; Startup message
(setf *startup-message* "^4*StumpWM^n ^7*has^n ^3*initialized^n^6*.^n")

;;; Window colors
(set-win-bg-color "#373b41")
(set-focus-color "#282a2e")
(set-unfocus-color "#1d1f21")
(set-float-focus-color "#282a2e")
(set-float-unfocus-color "#1d1f21")

;;; Message and input prompt colors
(set-border-color "#373b41")
(set-fg-color "#c5c8c6")
(set-bg-color "#1d1f21")

;; Message and input prompt style
(setf *input-window-gravity* :center)
(setf *message-window-gravity* :bottom-right)
(setf *input-history-ignore-duplicates* 1)

;;; Grabbed pointer style
(setf *grab-pointer-character* 40)
(setf *grab-pointer-character-mask* 41)
(setf *grab-pointer-foreground* (hex-to-xlib-color "#1d1f21"))
(setf *grab-pointer-background* (hex-to-xlib-color "#f0c674"))

;;; Disable mouse focus
(setf *mouse-focus-policy* :sloppy)

;;; Mode line colors
(setf *mode-line-foreground-color* "#c5c8c6")
(setf *mode-line-background-color* "#1d1f21")
(setf *mode-line-border-color* "#373b41")

;;; Group and window format
(setf *group-format* "%n%s(%t)")
(setf *window-format* "%m%n%s(%50t)")
(setf *hidden-window-color* "^06*")

;;; Mode line time format
(setf *time-modeline-string* "^5*%e-%m^n ^3*%R^n")

;;; Mode line format
(setf *screen-mode-line-format*
      '("^7*<^3*%n^7*>^n ^04%u^n ^30%v^n ^>"
        (:eval (run-shell-command "~/.scripts/statusbar" t))))

;;; Show the mode line for the current screen
(toggle-mode-line (current-screen)
                  (current-head))

;;; First group name and other group creation
(setf (group-name (car (screen-groups (current-screen)))) "term")
(run-commands "gnewbg www"
              "gnewbg emacs"
              "gnewbg misc"
              "gnewbg-float float")

;;; Default terminal
(defcommand terminal () ()
  "Start a terminal session."
  (run-shell-command "xterm"))

;;; Volume control functions
(defcommand voltoggle () ()
  "Toggle volume."
  (run-shell-command "~/.scripts/audio_toggle mute"))

(defcommand volplus () ()
  "Increase volume."
  (run-shell-command "~/.scripts/audio_toggle up"))

(defcommand volminus () ()
  "Decrease volume"
  (run-shell-command "~/.scripts/audio_toggle down"))

;;; Run or raise
(defcommand eclient () ()
  "Run/Raise Emacsclient."
  (run-or-raise "emacsclient -c" '(:class "Emacs")))

(defcommand chrome () ()
  "Run/Raise Chrome."
  (run-or-raise "google-chrome-stable" '(:class "Google-chrome")))

(defcommand gimp () ()
  "Run/Raise GIMP."
  (run-or-raise "gimp" '(:class "Gimp")))

;;; Window placement
(clear-window-placement-rules)

(define-frame-preference "www"
    (0 t t :class "Google-chrome"))

(define-frame-preference "emacs"
    (0 t t :class "Emacs"))

(define-frame-preference "misc"
    (0 t t :class "Gimp"))

(define-frame-preference "misc"
    (0 t t :class "libreoffice"))

(define-frame-preference "misc"
    (0 t t :class "Zathura"))

;;; Change default prefix key
(set-prefix-key (kbd "C-i"))

;;; Swap default key bindings
(define-key *root-map* (kbd "b") "chrome")
(define-key *root-map* (kbd "c") "terminal")
(define-key *root-map* (kbd "e") "eclient")

;;; Volume control key bindings
(define-key *top-map* (kbd "XF86AudioMute") "voltoggle")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "volplus")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "volminus")

;;; Command for on-demand starting of the Swank server
(defcommand slynk () ()
  "Creates a Slynk server in the StumpWM Lisp process."
  (slynk:create-server
   :port 4006
   :dont-close t)
  (echo-string (current-screen) "Starting Slynk..."))

(define-key *help-map* (kbd "s") "slynk")

;;; Remap Firefox keys
(define-remapped-keys
    '(("Google-chrome"
       ("C-n" . "Down")
       ("C-p" . "Up")
       ("C-f" . "Right")
       ("C-b" . "Left")
       ("C-v" . "Next")
       ("M-v" . "Prior")
       ("M-w" . "C-c")
       ("C-w" . "C-x")
       ("C-y" . "C-v")
       ("M-<" . "Home")
       ("M->" . "End")
       ("C-M-b" . "M-Left")
       ("C-M-f" . "M-Right")
       ("C-k" . ("C-S-End" "C-x")))))

;;; config ends here
