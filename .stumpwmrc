;; -*-lisp-*-
(in-package :stumpwm)

;; Load swank
(require 'swank)
(swank:create-server) 

;; Contrib modules
(set-contrib-dir "~/stumpwm/contrib/")
(load-module "cpu")
(load-module "mem")
(load-module "net")
(load-module "mpd")

;; Font
(set-font "-xos4-terminus-medium-*-*-*-14-*-*-*-*-*-iso10646-1")

;; Change color map
(setf *colors* (list "grey25"        ; 0
		     "darkslategray" ; 1
		     "darkseagreen4" ; 2
		     "darkseagreen1" ; 3
		     "deeppink3"     ; 4
		     "plum3"         ; 5
		     "powderblue"    ; 6
		     "beige"))       ; 7
(update-color-map (current-screen))

;; Change highlight function format
(defun fmt-highlight (s)
  (format nil "^3*~A^n" s))

;; Startup message
(setf *startup-message* "^6*StumpWM^n ^7*has^n ^3*initialized^n^6*.^n")

;; Window colors
(set-bg-color "grey25")
(set-fg-color "beige")
(set-border-color "darkseagreen4")
(set-win-bg-color "grey25")
(set-focus-color "darkseagreen4")
(set-unfocus-color "darkseagreen1")
(set-float-focus-color "darkseagreen4")
(set-float-unfocus-color "grey25")

;; Mode-line colors
(setf *mode-line-background-color* "grey25"
      *mode-line-foreground-color* "darkseagreen4"
      *mode-line-border-color* "darkseagreen4"
      *background* "grey25")

;; Window style
(setf *window-border-style* :thin
      *maxsize-border-width* 1
      *mouse-focus-policy* :click)

;; Input and message prompt style
(setf *input-window-gravity* :center
      *message-window-gravity* :center
      *input-history-ignore-duplicates* 1)

;; Mode-line format
(setf *time-modeline-string* "^3*%d-%m %H:%M^n"
      *group-format* "%n %s %t"
      *screen-mode-line-format* (list "^6*%n^n %W ^> "
				      "^6*%c^n^7*|^n ^3*%M^n^7*|^n ^6*%l^n^7*|^n %d")
      *mode-line-border-width* 0
      *mode-line-position* :top
      *mode-line-timeout* 1)

;; Show mode-line for current screen
(stumpwm:toggle-mode-line (stumpwm:current-screen)
			  (stumpwm:current-head))

;; MPD control
(mpd-connect)

;; First group name and group creation
(setf (group-name (first (screen-groups (current-screen)))) "term")
(run-commands "gnewbg www" "gnewbg work" "gnewbg misc")

;; Run or raise
; Emacs Client
(defcommand eclient () ()
	    "Run/Raise Emacs Client"
	    (run-or-raise "emacsclient -c" '(:class "Emacs")))

; Conkeror
(defcommand conkeror () ()
	    "Run/Raise Conkeror"
	    (run-or-raise "conkeror" '(:class "Conkeror")))

; GIMP
(defcommand gimp () ()
	    "Run/Raise GIMP"
	    (run-or-raise "gimp" '(:class "Gimp")))

;; Window placement
(clear-window-placement-rules)

(define-frame-preference "www"
    (0 t t :class "Conkeror"))

(define-frame-preference "work"
    (0 t t :class "Emacs"))

(define-frame-preference "misc"
    (0 t t :class "Gimp"))


;; Keybindings
; Prefix key
(set-prefix-key (kbd "C-i"))

; Swap defaults
(define-key *root-map* (kbd "C-c") "conkeror")
(define-key *root-map* (kbd "c") "exec urxvtc")
(define-key *root-map* (kbd "e") "eclient")

; Fast group switching
(define-key *top-map* (kbd "s-1") "gselect 1")
(define-key *top-map* (kbd "s-2") "gselect 2")
(define-key *top-map* (kbd "s-3") "gselect 3")
(define-key *top-map* (kbd "s-4") "gselect 4")
(define-key *top-map* (kbd "s-5") "gselect 5")
(define-key *top-map* (kbd "s-6") "gselect 6")
(define-key *top-map* (kbd "s-7") "gselect 7")
(define-key *top-map* (kbd "s-8") "gselect 8")
(define-key *top-map* (kbd "s-9") "gselect 9")
(define-key *top-map* (kbd "s-0") "gselect 10")

; MPD controls
(define-key *top-map* (kbd "s-b") *mpd-browse-map*)
(define-key *top-map* (kbd "s-s") *mpd-search-map*)
(define-key *top-map* (kbd "s-a") *mpd-add-map*)
(define-key *top-map* (kbd "s-m") *mpd-map*)
