;; -*-lisp-*-
(in-package :stumpwm)

;; Load swank
(require 'swank)
(swank:create-server) 

;; Contrib modules
(set-contrib-dir "~/stumpwm/contrib/")
(load-module "cpu")
(load-module "mem")
(load-module "net")

;; Font
(set-font "-xos4-terminus-medium-*-*-*-14-*-*-*-*-*-iso10646-1")

;; Change color map
(setf *colors* (list "gray10"            ; 0
		     "PaleVioletRed3"    ; 1
		     "medium sea green"  ; 2
		     "LightGoldenrod3"   ; 3
		     "SkyBlue"           ; 4
		     "wheat"             ; 5
		     "honeydew"          ; 6
		     "honeydew2"         ; 7
		     "honeydew3"         ; 8
		     "gray15"))          ; 9
(update-color-map (current-screen))

;; Change highlight function format
(defun fmt-highlight (s)
  (format nil "^6*~A^n" s))

;; Window colors
(set-focus-color "honeydew")
(set-border-color "honeydew4")
(set-win-bg-color "gray10")
(set-focus-color "honeydew2")
(set-fg-color "honeydew")
(set-bg-color "gray10")
(set-unfocus-color "honeydew4")
(set-float-focus-color "honeydew2")
(set-float-unfocus-color "gray5")

;; Mode-line colors
(setf *mode-line-background-color* "gray10"
      *mode-line-foreground-color* "honeydew4"
      *mode-line-border-color* "gray5"
      *background* "gray10")

;; Startup message
(setf *startup-message* "^4*StumpWM^n ^6*has^n ^3*initialized^n^6*.^n")

;; Window style
(setf *window-border-style* :thin
      *maxsize-border-width* 1
      *mouse-focus-policy* :click)

;; Input and message prompt style
(setf *input-window-gravity* :center
      *message-window-gravity* :center
      *input-history-ignore-duplicates* 1
      *timeout-wait* 2)

;; Mode-line format
(setf *time-modeline-string* "^3*%d-%m^n / ^4*%H:%M^n"
      *group-format* "%n %s %t"
      *screen-mode-line-format* (list "^5*%n^n %W ^> "
				      "^3*%c^n| ^4*%M^n| ^5*%l^n| %d")
      *mode-line-border-width* 0
      *mode-line-position* :top
      *mode-line-timeout* 1)

;; Show mode-line for current screen
(stumpwm:toggle-mode-line (stumpwm:current-screen)
                          (stumpwm:current-head))

;; Display the keysequence in progress
(defun key-press-hook (key key-seq cmd)
  (declare (ignore key))
  (unless (eq *top-map* *resize-map*)
    (let ((*message-window-gravity* :center))
      (message "Key sequence: ~A" (print-key-seq (reverse key-seq))))
    (when (stringp cmd)
      ;; Message duration
      (sleep 0.2))))

(defmacro replace-hook (hook fn)
  `(remove-hook ,hook ,fn)
  `(add-hook ,hook ,fn))

(replace-hook *key-press-hook* 'key-press-hook)

;; First group name and group creation
(setf (group-name (first (screen-groups (current-screen)))) "term")
(run-commands "gnewbg www" "gnewbg work" "gnewbg misc")

;; Run or raise
; RXVT
(defcommand rxvt () ()
            "Run/Raise urxvt-client"
            (run-or-raise "urxvtc" '(:class "URXVT")))

; Emacs Client
(defcommand eclient () ()
            "Run/Raise Emacs Client"
            (run-or-raise "emacsclient -c" '(:class "Emacs")))

; Conkeror
(defcommand conkeror () ()
	    "Run/Raise Conkeror"
	    (run-or-raise "conkeror" '(:class "Conkeror")))

; GIMP
(defcommand gimp () ()
	    "Run/Raise GIMP"
	    (run-or-raise "gimp" '(:class "Gimp")))

;; Window placement
(clear-window-placement-rules)

(define-frame-preference "www"
    (0 t t :class "Conkeror"))

(define-frame-preference "work"
    (0 t t :class "Emacs"))

(define-frame-preference "misc"
    (0 t t :class "Gimp"))

;; Prefix key
(set-prefix-key (kbd "C-i"))

;; Keybindings
(define-key *root-map* (kbd "C-c") "exec conkeror")
(define-key *root-map* (kbd "c") "exec urxvtc")
(define-key *root-map* (kbd "e") "exec emacsclient -c")
